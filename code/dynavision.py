# -*- coding: utf-8 -*-
"""DynaViT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OlHUmZxRsbG_7RDCHzI43_ZUtVDNIs6G
"""

# !pip install einops

# !pip install timm

"""### Importing Libraries"""

import torch
from torch import nn, einsum
from torch.utils.data import DataLoader, SequentialSampler, RandomSampler
from torchvision.datasets import CIFAR10, CIFAR100, ImageNet
from torch.optim import Adam, lr_scheduler
from torchvision import transforms

#import matplotlib.pyplot as plt
import numpy as np
#import pandas as pd

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from einops import rearrange, repeat
from einops.layers.torch import Rearrange
import pickle
import os
import re

from timm.models.layers import DropPath, PatchEmbed, trunc_normal_, lecun_normal_

from functools import partial

from tqdm import tqdm

#try:
    #from google.colab import drive
    #drive.mount("/content/gdrive")
    #colab = True
#except:
    #colab = False

if torch.cuda.is_available():
    device = torch.device('cuda')
    print(f'{torch.cuda.device_count()} GPU(s) available.')
    print('Device name:', torch.cuda.get_device_name(0))
else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

#helpers
#def show_torch_img(image):
    #plt.imshow(transforms.ToPILImage()(image))

def pair(t):
    return t if isinstance(t, tuple) else (t, t)

def soft_cross_entropy(predicts, targets):
    student_likelihood = nn.functional.log_softmax(predicts, dim=-1)
    targets_prob = nn.functional.softmax(targets, dim=-1)
    return -torch.sum(targets_prob * student_likelihood, dim=-1).mean()

"""## Model Code

### Layer Norm
"""

class PreNorm(nn.Module):
    def __init__(self, dim, fn, widths = None):
        super().__init__()
        self.widths = widths
        if widths is None:
            self.norm = nn.LayerNorm(dim, eps=1e-6)
        else:
            self.norms = nn.ModuleList([nn.LayerNorm(dim, eps=1e-6) for _ in range(widths)])
        self.fn = fn
    def forward(self, x, width_n=None, **kwargs):
        if self.widths is None:
            return self.fn(self.norm(x), **kwargs)
        return self.fn(self.norms[width_n](x), **kwargs)

"""### Feed Forward"""

class FeedForward(nn.Module):
    def __init__(self, dim, hidden_dim, dropout = 0.):
        super().__init__()
        # first layer of feed forward
        self.intermediate = nn.Linear(dim, hidden_dim)
        self.activation = nn.GELU()
        # second layer of feed forward
        self.dropout_intermediate = nn.Dropout(dropout)
        self.output = nn.Linear(hidden_dim, dim)
        self.dropout_output = nn.Dropout(dropout)
        
    def forward(self, x):
        x = self.intermediate(x)
        x = self.activation(x)
        x = self.dropout_intermediate(x)
        x = self.output(x)
        x = self.dropout_output(x)
        return x

class DynamicFeedForward(FeedForward):
    def __init__(self, dim, intermediate_dim, num_heads, dropout=0., width_mult=1.0):
        super(DynamicFeedForward, self).__init__(dim, intermediate_dim, dropout)
        self.intermediate = DynaLinear(dim, intermediate_dim, num_heads, dyna_dim=[False, True], width_mult = width_mult)
        self.output = DynaLinear(intermediate_dim, dim, num_heads, dyna_dim=[True, False], width_mult = width_mult)
    
    def reorder_intermediate_neurons(self, index, dim=0):
        index = index.to(self.intermediate.weight.device)
        W = self.intermediate.weight.index_select(dim, index).clone().detach()
        if self.intermediate.bias is not None:
            if dim == 1:
                b = self.intermediate.bias.clone().detach()
            else:
                b = self.intermediate.bias[index].clone().detach()
        self.intermediate.weight.requires_grad = False
        self.intermediate.weight.copy_(W.contiguous())
        self.intermediate.weight.requires_grad = True
        if self.intermediate.bias is not None:
            self.intermediate.bias.requires_grad = False
            self.intermediate.bias.copy_(b.contiguous())
            self.intermediate.bias.requires_grad = True

    def reorder_output_neurons(self, index, dim=1):
        index = index.to(self.output.weight.device)
        W = self.output.weight.index_select(dim, index).clone().detach()
        if self.output.bias is not None:
            if dim == 1:
                b = self.output.bias.clone().detach()
            else:
                b = self.output.bias[index].clone().detach()
        self.output.weight.requires_grad = False
        self.output.weight.copy_(W.contiguous())
        self.output.weight.requires_grad = True
        if self.output.bias is not None:
            self.output.bias.requires_grad = False
            self.output.bias.copy_(b.contiguous())
            self.output.bias.requires_grad = True

"""### Multi-head self attention"""

class Attention(nn.Module):
    def __init__(self, dim, heads = 8, dim_head = 64, dropout = 0., attn_dropout = 0.):
        super().__init__()
        inner_dim = dim_head *  heads
        self.project_out = not (heads == 1 and dim_head == dim)

        self.heads = heads
        self.scale = dim_head ** -0.5
        self.dim_head = dim_head

        self.attend = nn.Softmax(dim = -1)
        self.attn_dropout = nn.Dropout(attn_dropout)
        self.q = nn.Linear(dim, inner_dim, bias = False)
        self.k = nn.Linear(dim, inner_dim, bias = False)
        self.v = nn.Linear(dim, inner_dim, bias = False)

        if self.project_out:
            self.to_out = nn.Linear(inner_dim, dim)
            self.dropout = nn.Dropout(dropout)
        else:
            self.to_out = nn.Identity()

    def forward(self, x, head_mask = None):
        b, n, _, h = *x.shape, self.heads
        qkv = [self.q(x), self.k(x), self.v(x)]
        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = h), qkv)

        dots = einsum('b h i d, b h j d -> b h i j', q, k) * self.scale

        attn = self.attend(dots)
        attn = self.attn_dropout(attn)

        out = einsum('b h i j, b h j d -> b h i d', attn, v)
        out = rearrange(out, 'b h n d -> b n (h d)')

        if self.project_out:
            out = self.to_out(out)
            out = self.dropout(out)
        else:
            out = self.to_out(out)
        return out

"""### Multi-head Attention with variable width"""

class DynamicAttention(Attention):
    def __init__(self, dim, heads=8, dim_head=64, dropout=0., attn_dropout=0., width_mult = 1.0):
        super(DynamicAttention, self).__init__(dim, heads, dim_head, dropout=dropout, attn_dropout=attn_dropout)
        inner_dim = heads * dim_head

        self.q = DynaLinear(dim, inner_dim, heads, dyna_dim=[False, True], width_mult=width_mult)
        self.k = DynaLinear(dim, inner_dim, heads, dyna_dim=[False, True], width_mult=width_mult)
        self.v = DynaLinear(dim, inner_dim, heads, dyna_dim=[False, True], width_mult=width_mult)

        if self.project_out:
            self.to_out = DynaLinear(inner_dim, dim, heads, dyna_dim=[True, False], width_mult=width_mult)
            self.dropout = nn.Dropout(dropout)
        else:
            self.to_out = nn.Identity()
    
    def reorder_heads(self, idx):
        n, a = self.heads, self.dim_head
        index = torch.arange(n*a).reshape(n, a)[idx].view(-1).contiguous().long()

        def reorder_head_matrix(linearLayer, index, dim=0):
            index = index.to(linearLayer.weight.device)
            W = linearLayer.weight.index_select(dim, index).clone().detach()
            if linearLayer.bias is not None:
                if dim == 1:
                    b = linearLayer.bias.clone().detach()
                else:
                    b = linearLayer.bias[index].clone().detach()

            linearLayer.weight.requires_grad = False
            linearLayer.weight.copy_(W.contiguous())
            linearLayer.weight.requires_grad = True
            if linearLayer.bias is not None:
                linearLayer.bias.requires_grad = False
                linearLayer.bias.copy_(b.contiguous())
                linearLayer.bias.requires_grad = True

        reorder_head_matrix(self.q, index)
        reorder_head_matrix(self.k, index)
        reorder_head_matrix(self.v, index)
        reorder_head_matrix(self.to_out, index, dim=1)
    
    def forward(self, x, head_mask = None):
        b, n, _, h = *x.shape, round(self.heads * self.q.width_mult)
        qkv = [self.q(x), self.k(x), self.v(x)]
        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = h), qkv)

        dots = einsum('b h i d, b h j d -> b h i j', q, k) * self.scale

        attn = self.attend(dots)

        if head_mask is not None:
            head_mask = head_mask[:, :h, :, :]
            attn = attn * head_mask
        
        attn = self.attn_dropout(attn)

        out = einsum('b h i j, b h j d -> b h i d', attn, v)
        out = rearrange(out, 'b h n d -> b n (h d)')

        if self.project_out:
            out = self.to_out(out)
            out = self.dropout(out)
        else:
            out = self.to_out(out)
        return out

"""### Encoder Layers"""

class Transformer(nn.Module):
    def __init__(self, dim, depth, heads, dim_head, mlp_dim, dropout=0., attn_drop=0., drop_paths=None):
        super().__init__()
        self.layers = nn.ModuleList([])
        for i in range(depth):
            self.layers.append(nn.ModuleList([
                PreNorm(dim, Attention(dim, heads = heads, dim_head = dim_head, dropout = dropout, attn_dropout=attn_drop)),
                nn.Identity() if (drop_paths is None or drop_paths[i] == 0) else DropPath(drop_paths[i]),
                PreNorm(dim, FeedForward(dim, mlp_dim, dropout = dropout))
            ]))
    def forward(self, x, head_mask = None, return_states = False, width_n=None):
        hidden_states = []
        for i, (attn, drop_path, ff) in enumerate(self.layers):
            x = drop_path(attn(x, head_mask = head_mask[i], width_n=width_n)) + x
            x = drop_path(ff(x, width_n=width_n)) + x
            hidden_states.append(x)
        if return_states:
            return x, hidden_states
        return x

class DynamicTransformer(Transformer):
    def __init__(self, dim, depth, heads, dim_head, mlp_dim, dropout = 0., width_mult = 1.0, widths=None, attn_drop=0., drop_paths=None):
        super(DynamicTransformer, self).__init__(dim, depth, heads, dim_head, mlp_dim, dropout=dropout, attn_drop=attn_drop)
        self.layers = nn.ModuleList([])
        for i in range(depth):
            self.layers.append(nn.ModuleList([
                PreNorm(dim, DynamicAttention(dim, heads = heads, dim_head = dim_head, dropout = dropout, width_mult = width_mult, attn_dropout=attn_drop), widths=widths),
                nn.Identity() if (drop_paths is None or drop_paths[i] == 0) is None else DropPath(drop_paths[i]),
                PreNorm(dim, DynamicFeedForward(dim, mlp_dim, heads, dropout = dropout, width_mult = width_mult), widths=widths)
            ]))

"""### Vision Transformer"""

class VisionTransformer(nn.Module):
    """ Vision Transformer
    A PyTorch impl of : `An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale`
        - https://arxiv.org/abs/2010.11929
    Includes distillation token & head support for `DeiT: Data-efficient Image Transformers`
        - https://arxiv.org/abs/2012.12877
    """

    def __init__(self, img_size=224, patch_size=16, in_chans=3, num_classes=1000, embed_dim=768, depth=12,
                 num_heads=12, mlp_ratio=4., qkv_bias=True, representation_size=None, distilled=False,
                 drop_rate=0, attn_drop_rate=0., drop_path_rate=0., embed_layer=PatchEmbed, norm_layer=None,
                 act_layer=None, head_mask=None, weight_init=''):
        """
        Args:
            img_size (int, tuple): input image size
            patch_size (int, tuple): patch size
            in_chans (int): number of input channels
            num_classes (int): number of classes for classification head
            embed_dim (int): embedding dimension
            depth (int): depth of transformer
            num_heads (int): number of attention heads
            mlp_ratio (int): ratio of mlp hidden dim to embedding dim
            qkv_bias (bool): enable bias for qkv if True
            representation_size (Optional[int]): enable and set representation layer (pre-logits) to this value if set
            distilled (bool): model includes a distillation token and head as in DeiT models
            drop_rate (float): dropout rate
            attn_drop_rate (float): attention dropout rate
            drop_path_rate (float): stochastic depth rate
            embed_layer (nn.Module): patch embedding layer
            norm_layer: (nn.Module): normalization layer
            weight_init: (str): weight init scheme
        """
        super().__init__()
        self.num_classes = num_classes
        self.num_features = self.embed_dim = embed_dim  # num_features for consistency with other models
        self.num_tokens = 2 if distilled else 1
        norm_layer = norm_layer or partial(nn.LayerNorm, eps=1e-6)
        act_layer = act_layer or nn.GELU

        self.depth = depth

        self.patch_embed = embed_layer(
            img_size=img_size, patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim)
        num_patches = self.patch_embed.num_patches

        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.dist_token = nn.Parameter(torch.zeros(1, 1, embed_dim)) if distilled else None
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + self.num_tokens, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        dim_head = embed_dim // num_heads
        mlp_dim = embed_dim * mlp_ratio
        self.blocks = Transformer(embed_dim, depth, num_heads, dim_head, mlp_dim, drop_rate, attn_drop=attn_drop_rate, drop_paths=dpr)
        self.norm = norm_layer(embed_dim)

        # Representation layer
        if representation_size and not distilled:
            self.num_features = representation_size
            self.pre_logits = nn.Sequential(OrderedDict([
                ('fc', nn.Linear(embed_dim, representation_size)),
                ('act', nn.Tanh())
            ]))
        else:
            self.pre_logits = nn.Identity()

        # Classifier head(s)
        self.head = nn.Linear(self.num_features, num_classes) if num_classes > 0 else nn.Identity()
        self.head_dist = None
        if distilled:
            self.head_dist = nn.Linear(self.embed_dim, self.num_classes) if num_classes > 0 else nn.Identity()

        # self.init_weights(weight_init)

    def init_weights(self, mode=''):
        assert mode in ('jax', 'jax_nlhb', 'nlhb', '')
        head_bias = -math.log(self.num_classes) if 'nlhb' in mode else 0.
        trunc_normal_(self.pos_embed, std=.02)
        if self.dist_token is not None:
            trunc_normal_(self.dist_token, std=.02)
        if mode.startswith('jax'):
            # leave cls token as zeros to match jax impl
            named_apply(partial(_init_vit_weights, head_bias=head_bias, jax_impl=True), self)
        else:
            trunc_normal_(self.cls_token, std=.02)
            self.apply(_init_vit_weights)

    def _init_weights(self, m):
        # this fn left here for compat with downstream users
        _init_vit_weights(m)

    @torch.jit.ignore()
    def load_pretrained(self, checkpoint_path, prefix=''):
        _load_weights(self, checkpoint_path, prefix)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {'pos_embed', 'cls_token', 'dist_token'}

    def get_classifier(self):
        if self.dist_token is None:
            return self.head
        else:
            return self.head, self.head_dist

    def reset_classifier(self, num_classes, global_pool=''):
        self.num_classes = num_classes
        self.head = nn.Linear(self.embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        if self.num_tokens == 2:
            self.head_dist = nn.Linear(self.embed_dim, self.num_classes) if num_classes > 0 else nn.Identity()

    def forward_features(self, x):
        head_mask = [None] * self.depth
        x = self.patch_embed(x)
        cls_token = self.cls_token.expand(x.shape[0], -1, -1)  # stole cls_tokens impl from Phil Wang, thanks
        if self.dist_token is None:
            x = torch.cat((cls_token, x), dim=1)
        else:
            x = torch.cat((cls_token, self.dist_token.expand(x.shape[0], -1, -1), x), dim=1)
        x = self.pos_drop(x + self.pos_embed)
        x = self.blocks(x, head_mask=head_mask)
        x = self.norm(x)
        if self.dist_token is None:
            return self.pre_logits(x[:, 0])
        else:
            return x[:, 0], x[:, 1]

    def forward(self, x):
        x = self.forward_features(x)
        if self.head_dist is not None:
            x, x_dist = self.head(x[0]), self.head_dist(x[1])  # x must be a tuple
            if self.training and not torch.jit.is_scripting():
                # during inference, return the average of both classifier predictions
                return x, x_dist
            else:
                return (x + x_dist) / 2
        else:
            x = self.head(x)
        return x

class DynamicVisionTransformer(nn.Module):
    """ Vision Transformer
    A PyTorch impl of : `An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale`
        - https://arxiv.org/abs/2010.11929
    Includes distillation token & head support for `DeiT: Data-efficient Image Transformers`
        - https://arxiv.org/abs/2012.12877
    """

    def __init__(self, img_size=224, patch_size=16, in_chans=3, num_classes=1000, embed_dim=768, depth=12,
                 num_heads=12, mlp_ratio=4., qkv_bias=True, representation_size=None, distilled=False,
                 drop_rate=0., attn_drop_rate=0., drop_path_rate=0., embed_layer=PatchEmbed, norm_layer=None,
                 act_layer=None, weight_init='', width_mult = 1.0, widths=None):
        """
        Args:
            img_size (int, tuple): input image size
            patch_size (int, tuple): patch size
            in_chans (int): number of input channels
            num_classes (int): number of classes for classification head
            embed_dim (int): embedding dimension
            depth (int): depth of transformer
            num_heads (int): number of attention heads
            mlp_ratio (int): ratio of mlp hidden dim to embedding dim
            qkv_bias (bool): enable bias for qkv if True
            representation_size (Optional[int]): enable and set representation layer (pre-logits) to this value if set
            distilled (bool): model includes a distillation token and head as in DeiT models
            drop_rate (float): dropout rate
            attn_drop_rate (float): attention dropout rate
            drop_path_rate (float): stochastic depth rate
            embed_layer (nn.Module): patch embedding layer
            norm_layer: (nn.Module): normalization layer
            weight_init: (str): weight init scheme
        """
        super().__init__()
        self.num_classes = num_classes
        self.num_features = self.embed_dim = embed_dim  # num_features for consistency with other models
        self.num_tokens = 2 if distilled else 1
        norm_layer = norm_layer or partial(nn.LayerNorm, eps=1e-6)
        act_layer = act_layer or nn.GELU

        self.depth = depth

        self.patch_embed = embed_layer(
            img_size=img_size, patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim)
        num_patches = self.patch_embed.num_patches

        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.dist_token = nn.Parameter(torch.zeros(1, 1, embed_dim)) if distilled else None
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + self.num_tokens, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        dim_head = embed_dim // num_heads
        mlp_dim = embed_dim * mlp_ratio
        self.blocks = DynamicTransformer(embed_dim, depth, num_heads, dim_head, mlp_dim, drop_rate, attn_drop=attn_drop_rate, drop_paths=dpr, width_mult = width_mult, widths=widths)
        self.norm = norm_layer(embed_dim)

        # Representation layer
        if representation_size and not distilled:
            self.num_features = representation_size
            self.pre_logits = nn.Sequential(OrderedDict([
                ('fc', nn.Linear(embed_dim, representation_size)),
                ('act', nn.Tanh())
            ]))
        else:
            self.pre_logits = nn.Identity()

        # Classifier head(s)
        self.head = nn.Linear(self.num_features, num_classes) if num_classes > 0 else nn.Identity()
        self.head_dist = None
        if distilled:
            self.head_dist = nn.Linear(self.embed_dim, self.num_classes) if num_classes > 0 else nn.Identity()


    @torch.jit.ignore()
    def load_pretrained(self, checkpoint_path, prefix=''):
        _load_weights(self, checkpoint_path, prefix)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {'pos_embed', 'cls_token', 'dist_token'}

    def get_classifier(self):
        if self.dist_token is None:
            return self.head
        else:
            return self.head, self.head_dist

    def reset_classifier(self, num_classes, global_pool=''):
        self.num_classes = num_classes
        self.head = nn.Linear(self.embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        if self.num_tokens == 2:
            self.head_dist = nn.Linear(self.embed_dim, self.num_classes) if num_classes > 0 else nn.Identity()

    def forward_features(self, x, head_mask, width_n=None):
        x = self.patch_embed(x)
        cls_token = self.cls_token.expand(x.shape[0], -1, -1)  # stole cls_tokens impl from Phil Wang, thanks
        if self.dist_token is None:
            x = torch.cat((cls_token, x), dim=1)
        else:
            x = torch.cat((cls_token, self.dist_token.expand(x.shape[0], -1, -1), x), dim=1)
        x = self.pos_drop(x + self.pos_embed)
        x = self.blocks(x, head_mask=head_mask, width_n=width_n)
        x = self.norm(x)
        if self.dist_token is None:
            return self.pre_logits(x[:, 0])
        else:
            return x[:, 0], x[:, 1]

    def forward(self, x, head_mask=None, width_n = None):
        if head_mask is None:
            head_mask = [None] * self.depth
        else:
            if head_mask.dim() == 1:
                head_mask = head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(-1).unsqueeze(-1)
                head_mask = head_mask.expand(self.depth, -1, -1, -1, -1)
            elif head_mask.dim() == 2:
                head_mask = head_mask.unsqueeze(1).unsqueeze(-1).unsqueeze(-1)
            head_mask = head_mask.to(dtype=torch.float32)
        x = self.forward_features(x, head_mask, width_n=width_n)
        if self.head_dist is not None:
            x, x_dist = self.head(x[0]), self.head_dist(x[1])  # x must be a tuple
            if self.training and not torch.jit.is_scripting():
                # during inference, return the average of both classifier predictions
                return x, x_dist
            else:
                return (x + x_dist) / 2
        else:
            x = self.head(x)
        return x


"""### Dyanmic Linear Layer"""

# for rounding to get the heads up to num_heads*width_mult
def round_to_nearest(input_size, width_mult, num_heads, min_value=1):
    new_width_mult = round(num_heads * width_mult)*1.0/num_heads
    input_size = int(new_width_mult * input_size)
    new_input_size = max(min_value, input_size)
    return new_input_size

class DynaLinear(nn.Linear):
    def __init__(self, in_features, out_features, num_heads, bias=True, dyna_dim=[True, True], width_mult=1.0):
        super(DynaLinear, self).__init__(
            in_features, out_features, bias=bias)
        self.in_features_max = in_features
        self.out_features_max = out_features
        self.num_heads = num_heads
        self.width_mult = width_mult
        self.dyna_dim = dyna_dim

    def forward(self, input):
        if self.dyna_dim[0]:
            self.in_features = round_to_nearest(self.in_features_max, self.width_mult, self.num_heads)
        if self.dyna_dim[1]:
            self.out_features = round_to_nearest(self.out_features_max, self.width_mult, self.num_heads)
        weight = self.weight[:self.out_features, :self.in_features]
        if self.bias is not None:
            bias = self.bias[:self.out_features]
        else:
            bias = self.bias
        return nn.functional.linear(input, weight, bias)

    def set_grad_to_zero(self, width): # to not update parameters in incremental training
        if self.dyna_dim[0]:
            in_features = round_to_nearest(self.in_features_max, width, self.num_heads)
        if self.dyna_dim[1]:
            out_features = round_to_nearest(self.out_features_max, width, self.num_heads)
        self.weight.grad[:self.out_features, :self.in_features] = 0
        if self.bias is not None:
            self.bias.grad[:self.out_features] = 0


"""### Importance reordering"""

def compute_neuron_head_importance(
    eval_dataloader, model, n_layers, n_heads, loss_fn=nn.CrossEntropyLoss()
    ):
    """ This method shows how to compute:
        - neuron importance scores based on loss according to http://arxiv.org/abs/1905.10650
    """
    
    head_importance = torch.zeros(n_layers, n_heads).to(device)
    head_mask = torch.ones(n_layers, n_heads).to(device)
    head_mask.requires_grad_(requires_grad=True)

    intermediate_weight = []
    intermediate_bias = []
    output_weight = []
    for name, w in model.named_parameters():
        if 'intermediate' in name:
            if w.dim() > 1:
                intermediate_weight.append(w)
            else:
                intermediate_bias.append(w)

        if 'output' in name and 'attention' not in name:
            if w.dim() > 1:
                output_weight.append(w)
    
    neuron_importance = []
    for w in intermediate_weight:
        neuron_importance.append(torch.zeros(w.shape[0]).to(device))
    
    model.to(device)

    for batch in tqdm(eval_dataloader, desc="Evaluating"):
        batch = tuple(t.to(device) for t in batch)
        input_ids, label_ids = batch

        # calculate head importance
        outputs = model(input_ids, head_mask=head_mask)
        loss = loss_fn(outputs, label_ids)
        loss.backward()
        head_importance += head_mask.grad.abs().detach()

        # calculate  neuron importance
        for w1, b1, w2, current_importance in zip(intermediate_weight, intermediate_bias, output_weight, neuron_importance):
            current_importance += ((w1 * w1.grad).sum(dim=1) + b1 * b1.grad).abs().detach()
            current_importance += ((w2 * w2.grad).sum(dim=0)).abs().detach()
    
    return head_importance, neuron_importance

def reorder_neuron_head(model, head_importance, neuron_importance):

    model = model.module if hasattr(model, 'module') else model

    # reorder heads and ffn neurons
    for layer, current_importance in enumerate(neuron_importance):
        # reorder heads --> [layer][0]: attention module
        idx = torch.sort(head_importance[layer], descending=True)[-1]
        model.transformer.layers[layer][0].fn.reorder_heads(idx)
        # reorder neurons --> [layer][1]: feed-forward module
        idx = torch.sort(current_importance, descending=True)[-1]
        model.transformer.layers[layer][1].fn.reorder_intermediate_neurons(idx)
        model.transformer.layers[layer][1].fn.reorder_output_neurons(idx)

"""### Training"""

def train(
    train_data, eval_data, mode = "full", method = None, width_list = None,
    weights_file = None, **args
    ):
    assert mode in ["full", "width", "height"], "Wrong mode input"

    if "model" not in args:
        print("No pretrained model found, initializing model")
        if method=="difflayernorm":
            model = DynamicVisionTransformer(
                        img_size=args["img_size"], patch_size=args["patch_size"], 
                        num_classes=args["num_classes"], embed_dim=args["embed_dim"], 
                        depth=args["depth"], num_heads=args["num_heads"], mlp_ratio=args["mlp_ratio"], 
                        drop_rate = args["drop_rate"],
                        attn_drop_rate = args["attn_drop_rate"],
                        drop_path_rate = args["drop_path_rate"],
                        distilled = args["distilled"],
                        qkv_bias = args["qkv_bias"],
                        norm_layer = args["norm_layer"],
                        act_layer = args["act_layer"],
                        representation_size = args["representation_size"],
                        width_mult = 1.0, widths=len(width_list)
            )
        else:
            model = DynamicVisionTransformer(
                        img_size=args["img_size"], patch_size=args["patch_size"], 
                        num_classes=args["num_classes"], embed_dim=args["embed_dim"], 
                        depth=args["depth"], num_heads=args["num_heads"], mlp_ratio=args["mlp_ratio"], 
                        drop_rate = args["drop_rate"],
                        attn_drop_rate = args["attn_drop_rate"],
                        drop_path_rate = args["drop_path_rate"],
                        distilled = args["distilled"],
                        qkv_bias = args["qkv_bias"],
                        norm_layer = args["norm_layer"],
                        act_layer = args["act_layer"],
                        representation_size = args["representation_size"],
                        width_mult = 1.0
            )
    else:
        model = args["model"]
        args["model_path"] = os.path.join(args["model_path"], "retrained")

    model.to(device)

    if weights_file is not None:
        model.load_state_dict(torch.load(weights_file))
    
    optimizer = Adam(model.parameters(), lr=1e-4)
    scheduler = lr_scheduler.ReduceLROnPlateau(optimizer, patience=2)

    if mode == "full":
        train_model(model, path = os.path.join(args["model_path"], "model.pt"),
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    optimizer=optimizer, scheduler=scheduler
                    )
    
    if mode == "width":

        if method == "separate":
            print("Training separately")
            width_list = sorted(width_list)
            for i, width in enumerate(tqdm(width_list, desc="Width", leave=False)):
                print(f"\nWidth: {width}")
                model.apply(lambda m: setattr(m, 'width_mult', width))
                path = os.path.join(args["model_path"], f"model_width_separate_{width}.pt")
                train_model(
                    model, path = os.path.join(args["model_path"], "model.pt"),
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    optimizer=optimizer, scheduler=scheduler
                    )
                model = DynaViT(
                    image_size=args["image_size"], patch_size=args["patch_size"], 
                    num_classes=args["num_classes"], dim=args["dim"], 
                    depth=args["depth"], heads=args["heads"], mlp_dim=args["mlp_dim"], 
                    pool = args["pool"], channels = args["channels"], dim_head = args["dim_head"], 
                    dropout = args["dropout"], emb_dropout = args["emb_dropout"],
                    width_mult = 1.0
                )

        if method == "sandwich":
            print("Training Sandwich")
            width_list = sorted(width_list)
            path = os.path.join(args["model_path"], "model_width_naive.pt")
            train_sandwich(
                    model, path = path,
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    width_min = width_list[0], width_max = width_list[-1], n_widths=len(width_list), 
                    optimizer=optimizer, scheduler=scheduler
                    )
        
        if method == "naive":
            print("Training Naive")
            width_list = sorted(width_list)
            path = os.path.join(args["model_path"], "model_width_naive.pt")
            train_naive(
                    model, path = path,
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    width_list = width_list, optimizer=optimizer, scheduler=scheduler
                    )
            
        if method == "difflayernorm":
            print("Training Different Layer Norm wise")
            width_list = sorted(width_list)
            path = os.path.join(args["model_path"], "model_width_naive.pt")
            train_naive(
                    model, path = path,
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    width_list = width_list, optimizer=optimizer, scheduler=scheduler,
                    layernorm = True
                    )
        
        if method == "incremental":
            print("Training Incremental")
            width_list = sorted(width_list)
            path = os.path.join(args["model_path"], "model_width_incremental.pt")
            for i, width in enumerate(tqdm(width_list, desc="Width", leave=False)):
                print(f"\nWidth: {width}")
                model.apply(lambda m: setattr(m, 'width_mult', width))
                train_incremental(
                    model, path = path,
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    optimizer=optimizer, scheduler=scheduler,
                    freeze_width = width_list[i-1] if i > 0 else None
                    )
                model.load_state_dict(torch.load(path))

        if method == "distillation":
            print("Training Distillation")
            teacher_model = DynaViT(
                image_size=args["image_size"], patch_size=args["patch_size"], 
                num_classes=args["num_classes"], dim=args["dim"], 
                depth=args["depth"], heads=args["heads"], mlp_dim=args["mlp_dim"], 
                pool = args["pool"], channels = args["channels"], dim_head = args["dim_head"], 
                dropout = args["dropout"], emb_dropout = args["emb_dropout"],
                width_mult = 1.0
            )
            teacher_model.load_state_dict(torch.load(args["teacher_weights"]))
            head_importance, neuron_importance = compute_neuron_head_importance(
                eval_data, model, args["depth"], args["heads"], 
                loss_fn=args["loss_fn"]
                )
            reorder_neuron_head(teacher_model, head_importance, neuron_importance)
            width_list = sorted(width_list, reverse=True)
            path = os.path.join(args["model_path"], "model_width_distillation.pt")
            for i, width in enumerate(tqdm(width_list, desc="Width", leave=False)):
                print(f"\nWidth: {width}")
                model.apply(lambda m: setattr(m, 'width_mult', width))
                train_distillation(
                    model, teacher_model = teacher_model, path = path,
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"],
                    optimizer=optimizer, scheduler=scheduler,
                    lambda1 = args["lambda1"], lambda2 = args["lambda2"]
                )
                model.load_state_dict(torch.load(path))
            print("Fine tuning after distillation")
            path = os.path.join(args["model_path"], "model_width_distillation_finetuned.pt")
            for i, width in enumerate(tqdm(width_list, desc="Width", leave=False)):
                print(f"\nWidth: {width}")
                model.apply(lambda m: setattr(m, 'width_mult', width))
                train_model(
                    model, path = path,
                    train_data = train_data, eval_data = eval_data,
                    epochs = args["epochs"], loss_fn = args["loss_fn"],
                    optimizer=optimizer, scheduler=scheduler,
                    lambda1 = args["lambda1"], lambda2 = args["lambda2"]
                )
                model.load_state_dict(torch.load(path))

def train_model(model, train_data, eval_data, path, epochs, loss_fn, optimizer, scheduler, **args):
    model.train()
    best_eval_loss = 1e8
    
    for epoch in tqdm(range(epochs), desc="Epochs", leave=False):
        total_loss = 0.0
        print(f"\nEpoch: {epoch}")

        for i, data in enumerate(tqdm(train_data, desc="Training", leave=False)):
            
            inputs, labels = tuple(t.to(device) for t in data)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = loss_fn(outputs, labels)
            loss.backward()
            optimizer.step()

            total_loss += loss.item()*inputs.size(0)
        
        print(f"Train loss = {total_loss/len(train_data.sampler)}")

        model.eval()
        eval_loss = 0.0

        with torch.no_grad():
            for i, data in enumerate(tqdm(eval_data, desc="Evaluating", leave=False)):
                inputs, labels = tuple(t.to(device) for t in data)
                outputs = model(inputs)
                loss = loss_fn(outputs, labels)
                eval_loss += loss.item()*inputs.size(0)
        
        eval_loss = eval_loss/len(eval_data.sampler)
        scheduler.step(metrics=eval_loss)

        if eval_loss < best_eval_loss:
            torch.save(model.state_dict(), path)
            best_eval_loss = eval_loss

        print(f"Validation loss = {eval_loss}")

def train_naive(model, train_data, eval_data, path, epochs, loss_fn, 
                        width_list, optimizer, scheduler, layernorm=False, **args):
    model.train()
    best_eval_loss = 1e8
    
    for epoch in tqdm(range(epochs), desc="Epochs", leave=False):
        total_loss = 0.0
        print(f"\nEpoch: {epoch}")

        for i, data in enumerate(tqdm(train_data, desc="Training", leave=False)):

            inputs, labels = tuple(t.to(device) for t in data)
            optimizer.zero_grad()
            width_list_loss = 0.0
            for j, width in enumerate(width_list):
                model.apply(lambda m: setattr(m, 'width_mult', width))
                if layernorm:
                    outputs = model(inputs, width_n=j)
                else:
                    outputs = model(inputs)
                loss = loss_fn(outputs, labels)
                width_list_loss += loss.item()
                loss.backward()
            optimizer.step()

            total_loss += (width_list_loss/len(width_list))*inputs.size(0)
        
        print(f"Train loss = {total_loss/len(train_data.sampler)}")

        model.eval()
        eval_loss = 0.0

        with torch.no_grad():
            for i, data in enumerate(tqdm(eval_data, desc="Evaluating", leave=False)):
                inputs, labels = tuple(t.to(device) for t in data)
                width_list_loss = 0.0
                for j, width in enumerate(width_list):
                    model.apply(lambda m: setattr(m, 'width_mult', width))
                    if layernorm:
                        outputs = model(inputs, width_n=j)
                    else:
                        outputs = model(inputs)
                    loss = loss_fn(outputs, labels)
                    width_list_loss += loss.item()

                eval_loss += (width_list_loss/len(width_list))*inputs.size(0)
        
        eval_loss = eval_loss/len(eval_data.sampler)
        scheduler.step(metrics=eval_loss)

        if eval_loss < best_eval_loss:
            torch.save(model.state_dict(), path)
            best_eval_loss = eval_loss

        print(f"Validation loss = {eval_loss}")

def train_sandwich(model, train_data, eval_data, path, epochs, loss_fn,  
                        optimizer, scheduler, layernorm=False, width_min = 0.25, width_max = 1, n_widths=5, 
                   **args
                   ):
    model.train()
    best_eval_loss = 1e8
    
    for epoch in tqdm(range(epochs), desc="Epochs", leave=False):
        total_loss = 0.0
        print(f"\nEpoch: {epoch}")

        for i, data in enumerate(tqdm(train_data, desc="Training", leave=False)):

            inputs, labels = tuple(t.to(device) for t in data)
            optimizer.zero_grad()
            width_list_loss = 0.0
            width_list = list(np.random.choice(np.arange(256*width_min, 256*width_max), n_widths-2))
            width_list = [width_min] + width_list + [width_max]
            for j, width in enumerate(width_list):
                model.apply(lambda m: setattr(m, 'width_mult', width))
                if layernorm:
                    outputs = model(inputs, width_n=j)
                else:
                    outputs = model(inputs)
                loss = loss_fn(outputs, labels)
                width_list_loss += loss.item()
                loss.backward()
            optimizer.step()

            total_loss += (width_list_loss/len(width_list))*inputs.size(0)
        
        print(f"Train loss = {total_loss/len(train_data.sampler)}")

        model.eval()
        eval_loss = 0.0

        with torch.no_grad():
            for i, data in enumerate(tqdm(eval_data, desc="Evaluating", leave=False)):
                inputs, labels = tuple(t.to(device) for t in data)
                width_list_loss = 0.0
                for j, width in enumerate(width_list):
                    model.apply(lambda m: setattr(m, 'width_mult', width))
                    if layernorm:
                        outputs = model(inputs, width_n=j)
                    else:
                        outputs = model(inputs)
                    loss = loss_fn(outputs, labels)
                    width_list_loss += loss.item()

                eval_loss += (width_list_loss/len(width_list))*inputs.size(0)
        
        eval_loss = eval_loss/len(eval_data.sampler)
        scheduler.step(metrics=eval_loss)

        if eval_loss < best_eval_loss:
            torch.save(model.state_dict(), path)
            best_eval_loss = eval_loss

        print(f"Validation loss = {eval_loss}")

def train_incremental(model, train_data, eval_data, path, 
                      epochs, loss_fn, optimizer, scheduler, 
                      freeze_width=None, **args):
    model.train()
    best_eval_loss = 1e8

    def zero_grad_dyna_linear(x, width):
        if isinstance(x, DynaLinear):
            x.set_grad_to_zero(width)
    
    for epoch in tqdm(range(epochs), desc="Epochs", leave=False):
        total_loss = 0.0
        print(f"\nEpoch: {epoch}")

        for i, data in enumerate(tqdm(train_data, desc="Training", leave=False)):

            inputs, labels = tuple(t.to(device) for t in data)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = loss_fn(outputs, labels)
            loss.backward()
            
            # important step to not destroy previously learned parameters
            if freeze_width:
                model.apply(lambda x: zero_grad_dyna_linear(x, freeze_width))

            optimizer.step()

            total_loss += loss.item()*inputs.size(0)

        print(f"Train loss = {total_loss/len(train_data.sampler)}")

        model.eval()
        eval_loss = 0.0

        with torch.no_grad():
            for i, data in enumerate(tqdm(eval_data, desc="Evaluating", leave=False)):
                inputs, labels = tuple(t.to(device) for t in data)
                outputs = model(inputs)
                loss = loss_fn(outputs, labels)
                eval_loss += loss.item()*inputs.size(0)

        eval_loss = eval_loss/len(eval_data.sampler)
        scheduler.step(metrics=eval_loss)

        if eval_loss < best_eval_loss:
            torch.save(model.state_dict(), path)
            best_eval_loss = eval_loss

        print(f"Validation loss = {eval_loss}")

def train_distillation(model, teacher_model, train_data, eval_data, path, 
                      epochs, optimizer, scheduler, lambda1, lambda2,
                      **args):
    model.train()
    best_eval_loss = 1e8

    loss_mse = nn.MSELoss()

    def zero_grad_dyna_linear(x, width):
        if isinstance(x, DynaLinear):
            x.set_grad_to_zero(width)
    
    for epoch in tqdm(range(epochs), desc="Epochs", leave=False):
        total_loss = 0.0
        print(f"\nEpoch: {epoch}")

        for i, data in enumerate(tqdm(train_data, desc="Training", leave=False)):

            inputs, labels = tuple(t.to(device) for t in data)
            optimizer.zero_grad()
            with torch.no_grad():
                teacher_out, teacher_hidden = teacher_model(inputs, return_states=True)
            student_out, student_hidden = model(inputs, return_states=True)
            loss1 = soft_cross_entropy_loss(student_out, teacher_out.detach())
            loss2 = loss_mse(student_hidden, teacher_hidden.detach())

            loss = loss1*lambda1 + loss2*lambda2
            loss.backward()

            optimizer.step()

            total_loss += loss.item()*inputs.size(0)

        print(f"Train loss = {total_loss/len(train_data.sampler)}")

        model.eval()
        eval_loss = 0.0

        with torch.no_grad():
            for i, data in enumerate(tqdm(eval_data, desc="Evaluating", leave=False)):
                inputs, labels = tuple(t.to(device) for t in data)
                outputs = model(inputs)
                loss = loss_fn(outputs, labels)
                eval_loss += loss.item()*inputs.size(0)

        eval_loss = eval_loss/len(eval_data.sampler)
        scheduler.step(metrics=eval_loss)

        if eval_loss < best_eval_loss:
            torch.save(model.state_dict(), path)
            best_eval_loss = eval_loss

        print(f"Validation loss = {eval_loss}")

def print_metrics(model, test_data, metric_funcs, loss_fn=None, width_list=None, width_switch=False):
    model.eval()
    model.to(device)

    if loss_fn is None:
        loss_fn = nn.CrossEntropyLoss()

    if width_list:
        print(f"Width | {'Loss':^20}", end = "")
        for metric, args in metric_funcs:
            print(f" | {metric.__name__:^20}", end = "")
        print()
        for k, width in enumerate(width_list):
            print(f"{width:^5}", end = "")
            model.apply(lambda m: setattr(m, 'width_mult', width))
            preds = []
            truths = []
            
            total_loss = 0
            with torch.no_grad():
                for i, data in enumerate(test_data):
                    inputs, labels = tuple(t.to(device) for t in data)
                    if width_switch:
                        outputs = model(inputs, width_n=k)
                    else:
                        outputs = model(inputs)
                    loss = loss_fn(outputs, labels)
                    total_loss += loss.item()*inputs.size(0)
                    preds = preds + list(
                        torch.argmax(
                            nn.functional.softmax(outputs.cpu(), dim=1), 
                            dim=1
                            )
                        )
                    truths = truths + list(labels.cpu())
            test_loss = total_loss/len(test_data.sampler)
            print(f" | {test_loss:^20.4f}", end = "")
            for metric, args in metric_funcs:
                perf = metric(truths, preds, **args)
                print(f" | {perf:^20.4f}", end = "")
            print()
    else:
        preds = []
        truths = []
        total_loss = 0
        with torch.no_grad():
            for i, data in enumerate(test_data):
                inputs, labels = tuple(t.to(device) for t in data)
                outputs = model(inputs)
                loss = loss_fn(outputs, labels)
                total_loss += loss.item()*inputs.size(0)
                preds = preds + list(
                    torch.argmax(
                        nn.functional.softmax(outputs.cpu(), dim=1), 
                        dim=1
                        )
                    )
                truths = truths + list(labels.cpu())
        test_loss = total_loss/len(test_data.sampler)
        print(f"Loss: {test_loss}")
        for metric, args  in metric_funcs:
            perf = metric(truths, preds, **args)
            print(f"{metric.__name__}: {perf:^.4f}")
